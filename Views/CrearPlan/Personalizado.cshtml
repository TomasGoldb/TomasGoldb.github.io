@{
    ViewData["Title"] = "Crear plan - Juntify";
}

<main class="elegir-tipo-plan">
    <div class="main">
        <div class="progress-container">
            <div class="step completed">1</div>
            <div class="line"></div>
            <div class="step">2</div>
            <div class="line"></div>
            <div class="step">3</div>
            <div class="line"></div>
            <div class="step">4</div>
        </div>
        <button id="next">Siguiente</button>
        <h1 class="titulo-violeta">Plan personalizado</h1>

        <p>
            Enter some tags:
        </p>
        <p>
            <div class="tags-input" data-name="tags-input">
                <!--<span class="tag">CSS<span class="close"></span></span>
                <span class="tag">JavaScript<span class="close"></span></span>
                <span class="tag">HTML<span class="close"></span></span>-->
            </div>
        </p>

    </div>
    <div class="autoComplete_wrapper">
        <input id="autoComplete" type="search" dir="ltr" spellcheck=false autocorrect="off" autocomplete="off" autocapitalize="off">
    </div>
</main>

<script>


    function AutoCompletado(){
        $.ajax({
                    url: '@Url.Action("ObtenerLugares", "CrearPlan")',
                    type: 'GET',
                    data: {},
                    success: function (data) {
                        const autoCompleteJS = new autoComplete({
                        placeHolder: "Search for Food...",
                        data: {
                            src: data.Lista,
                            cache: true,
                        },
                        resultItem: {
                            highlight: true
                        },
                        events: {
                            input: {
                                selection: (event) => {
                                    const selection = event.detail.selection.value;
                                    autoCompleteJS.input.value = selection;
                                }
                            }
                        }
                        });
                    }
                });
    }
    





    let paso = 0;
const steps = document.querySelectorAll('.step');
const lines = document.querySelectorAll('.line');
const nextButton = document.getElementById('next');

nextButton.addEventListener('click', () => {
    if (paso < steps.length - 1) {
        paso++;
        steps[paso].classList.add('completed');
        lines[paso - 1].classList.add('completed'); // Marca la línea anterior como completada
    }
});

[].forEach.call(document.getElementsByClassName('tags-input'), function (el) {
    let hiddenInput = document.createElement('input'),
        mainInput = document.createElement('input'),
        tags = [];
    
    hiddenInput.setAttribute('type', 'hidden');
    hiddenInput.setAttribute('name', el.getAttribute('data-name'));

    mainInput.setAttribute('type', 'text');
    mainInput.classList.add('main-input');
    mainInput.addEventListener('input', function () {
        let enteredTags = mainInput.value.split(',');
        if (enteredTags.length > 1) {
            enteredTags.forEach(function (t) {
                let filteredTag = filterTag(t);
                if (filteredTag.length > 0)
                    addTag(filteredTag);
            });
            mainInput.value = '';
        }
    });

    mainInput.addEventListener('keydown', function (e) {
        let keyCode = e.which || e.keyCode;
        if (keyCode === 8 && mainInput.value.length === 0 && tags.length > 0) {
            removeTag(tags.length - 1);
        }
    });

    el.appendChild(mainInput);
    el.appendChild(hiddenInput);

    addTag('hello!');

    function addTag (text) {
        let tag = {
            text: text,
            element: document.createElement('span'),
        };

        tag.element.classList.add('tag');
        tag.element.textContent = tag.text;

        let closeBtn = document.createElement('span');
        closeBtn.classList.add('close');
        closeBtn.addEventListener('click', function () {
            removeTag(tags.indexOf(tag));
        });
        tag.element.appendChild(closeBtn);

        tags.push(tag);

        el.insertBefore(tag.element, mainInput);

        refreshTags();
    }

    function removeTag (index) {
        let tag = tags[index];
        tags.splice(index, 1);
        el.removeChild(tag.element);
        refreshTags();
    }

    function refreshTags () {
        let tagsList = [];
        tags.forEach(function (t) {
            tagsList.push(t.text);
        });
        hiddenInput.value = tagsList.join(',');
    }

    function filterTag (tag) {
        return tag.replace(/[^\w -]/g, '').trim().replace(/\W+/g, '-');
    }
});



</script>