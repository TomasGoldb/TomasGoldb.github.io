@{
    ViewData["Title"] = "Crear plan - Juntify";
}

<main class="elegir-tipo-plan">
    <div class="main">
        <div class="progress-container">
            <div class="step completed">1</div>
            <div class="line"></div>
            <div class="step">2</div>
            <div class="line"></div>
            <div class="step">3</div>
            <div class="line"></div>
            <div class="step">4</div>
        </div>
        <h1 class="titulo-violeta">Plan personalizado</h1>

        <!----<div class="tag-input">
        <ul id="tags"><input type="text" id="tag-input" placeholder="Escribe y presiona Enter o ','" autocomplete="off" /> </ul>
        
        <div id="suggestions" class="suggestions"></div>
        </div>--->
        <div class="contenedores-pers">

            <div class="autocomplete-container">
            <p>Ingrese la preferencia del lugar de destino del plan:</p>
                <input type="text" id="autocomplete-input" autocomplete="off" placeholder="Escribe para buscar...">
                <a class="boton-violeta" id="siguiente-btn" href="#">Siguiente</a>

                <div class="suggestions" id="suggestions"></div>
            </div>
        </div>


    </div>
    
</main>

<script>

const typeTranslations = {
  accounting: "contabilidad",
  airport: "aeropuerto",
  amusement_park: "parque de atracciones",
  aquarium: "acuario",
  art_gallery: "galería de arte",
  atm: "cajero automático",
  bakery: "panadería",
  bank: "banco",
  bar: "bar",
  beauty_salon: "salón de belleza",
  bicycle_store: "tienda de bicicletas",
  book_store: "librería",
  bowling_alley: "bolera",
  bus_station: "estación de autobuses",
  cafe: "cafetería",
  campground: "campamento",
  car_dealer: "concesionario de coches",
  car_rental: "alquiler de coches",
  car_repair: "reparación de coches",
  car_wash: "lavado de coches",
  casino: "casino",
  cemetery: "cementerio",
  church: "iglesia",
  city_hall: "ayuntamiento",
  clothing_store: "tienda de ropa",
  convenience_store: "tienda de conveniencia",
  courthouse: "palacio de justicia",
  dentist: "dentista",
  department_store: "gran almacén",
  doctor: "doctor",
  drugstore: "farmacia",
  electrician: "electricista",
  electronics_store: "tienda de electrónica",
  embassy: "embajada",
  fire_station: "estación de bomberos",
  florist: "floristería",
  funeral_home: "funeraria",
  furniture_store: "tienda de muebles",
  gas_station: "gasolinera",
  gym: "gimnasio",
  hair_care: "cuidado del cabello",
  hardware_store: "ferretería",
  hindu_temple: "templo hindú",
  home_goods_store: "tienda de artículos para el hogar",
  hospital: "hospital",
  insurance_agency: "agencia de seguros",
  jewelry_store: "joyería",
  laundry: "lavandería",
  lawyer: "abogado",
  library: "biblioteca",
  light_rail_station: "estación de tren ligero",
  liquor_store: "licorería",
  local_government_office: "oficina de gobierno local",
  locksmith: "cerrajero",
  lodging: "alojamiento",
  meal_delivery: "entrega de comida",
  meal_takeaway: "comida para llevar",
  mosque: "mezquita",
  movie_rental: "alquiler de películas",
  movie_theater: "cine",
  moving_company: "empresa de mudanzas",
  museum: "museo",
  night_club: "club nocturno",
  painter: "pintor",
  park: "parque",
  parking: "estacionamiento",
  pet_store: "tienda de mascotas",
  pharmacy: "farmacia",
  physiotherapist: "fisioterapeuta",
  plumber: "plomero",
  police: "policía",
  post_office: "oficina de correos",
  primary_school: "escuela primaria",
  real_estate_agency: "agencia inmobiliaria",
  restaurant: "restaurante",
  roofing_contractor: "contratista de techos",
  rv_park: "parque para casas rodantes",
  school: "escuela",
  secondary_school: "escuela secundaria",
  shoe_store: "zapatería",
  shopping_mall: "centro comercial",
  spa: "spa",
  stadium: "estadio",
  storage: "almacenamiento",
  store: "tienda",
  subway_station: "estación de metro",
  supermarket: "supermercado",
  synagogue: "sinagoga",
  taxi_stand: "parada de taxis",
  tourist_attraction: "atracción turística",
  train_station: "estación de tren",
  transit_station: "estación de transporte",
  travel_agency: "agencia de viajes",
  university: "universidad",
  veterinary_care: "cuidado veterinario",
  zoo: "zoológico"
};

const suggestionsArray = Object.values(typeTranslations), boton=document.getElementById("siguiente-btn");
let tipo;

document.getElementById('autocomplete-input').addEventListener('input', function() {
    const input = this.value.toLowerCase();
    const suggestionsBox = document.getElementById('suggestions');
    suggestionsBox.innerHTML = '';

    if (input) {
        // Filtrar las sugerencias y limitar a 10 elementos
        const filteredSuggestions = suggestionsArray
            .filter(item => item.toLowerCase().includes(input))
            .slice(0, 6); // Mostrar solo las primeras 10

        filteredSuggestions.forEach(item => {
            const div = document.createElement('div');
            div.textContent = item;
            div.classList.add('suggestion-item');
            div.onclick = () => {
                selectSuggestion(item);
            };
            suggestionsBox.appendChild(div);
        });
    }
});

function selectSuggestion(item) {
    const inputField = document.getElementById('autocomplete-input');
    inputField.value = item;
    document.getElementById('suggestions').innerHTML = ''; // Limpiar sugerencias
    tipo=getKeyByValue(typeTranslations,item);
    $("#siguiente-btn-personalizado").show(); //ejemplo con jquery asi ven la diferencia con getelementbyid
    console.log(getKeyByValue(typeTranslations,item));
}

function getKeyByValue(object, value) {
    return Object.keys(object).find(key =>
        object[key] === value);
}

boton.addEventListener("click", ()=>{
    if(tipo!=null){
    $.ajax({
                    url: '@Url.Action("InsertarTypeLugar", "CrearPlan")',
                    type: 'GET',
                    data: {type: tipo},
                    success: function (data) {
                        console.log("Se ha guardado correctamente el type.");
                    }
                });
            window.location.href="/crearplan/agregarParticipantes"
    }else{
        alert("error");
    }
});
    
/*
// Convertir las traducciones a un array de valores
const suggestionsArray = Object.values(typeTranslations);
let validTags = []; // Para almacenar las etiquetas válidas seleccionadas

document.getElementById('tag-input').addEventListener('input', function() {
    const input = this.value.toLowerCase();
    const suggestionsBox = document.getElementById('suggestions');
    suggestionsBox.innerHTML = '';

    if (input) {
        // Filtrar sugerencias excluyendo las que ya están en validTags
        const filteredSuggestions = suggestionsArray.filter(item => 
            item.toLowerCase().startsWith(input) && !validTags.includes(item.toLowerCase())
        );

        filteredSuggestions.forEach(item => {
            const div = document.createElement('div');
            div.textContent = item;
            div.classList.add('suggestion-item');
            div.onclick = () => selectSuggestion(item);
            suggestionsBox.appendChild(div);
        });
    }
});

document.getElementById('tag-input').addEventListener('keypress', function(event) {
    if (event.key === 'Enter' || event.key === ',') {
        event.preventDefault();
        const input = this.value.trim().toLowerCase();

        // Solo permitir añadir el tag si está en las sugerencias y no está ya en validTags
        if (!validTags.includes(input)) {
            const matchingSuggestion = suggestionsArray.find(item => item.toLowerCase() === input);
            if (matchingSuggestion) {
                addTag(matchingSuggestion);
                this.value = ''; // Limpiar el input
                document.getElementById('suggestions').innerHTML = ''; // Limpiar sugerencias
            }
        }
    }
});

function addTag(item) {
    const li = document.createElement('li');
    li.textContent = item;

    const removeBtn = document.createElement('span');
    removeBtn.textContent = '✖';
    removeBtn.classList.add('remove-tag');
    removeBtn.onclick = () => {
        li.remove(); // Eliminar la etiqueta
        validTags = validTags.filter(tag => tag !== item.toLowerCase()); // Eliminar de la lista de etiquetas válidas
        suggestionsArray.push(item); // Volver a añadir la etiqueta eliminada a las sugerencias
    };

    li.appendChild(removeBtn);
    document.getElementById('tags').appendChild(li);
    validTags.push(item.toLowerCase());
    console.log(validTags);
}

function selectSuggestion(item) {
    if (!validTags.includes(item.toLowerCase())) { // Asegúrate de que no se duplique
        // Eliminar de las sugerencias
        suggestionsArray.splice(suggestionsArray.indexOf(item), 1);
        addTag(item);
        document.getElementById('tag-input').value = ''; // Limpiar el input
        document.getElementById('suggestions').innerHTML = ''; // Limpiar sugerencias
    }
}
*/






    let paso = 2;
const steps = document.querySelectorAll('.step');
const lines = document.querySelectorAll('.line');
document.addEventListener('DOMContentLoaded', () => {
    for (let i=1;i<paso;i++){
    if (i < steps.length - 1) {
        steps[i].classList.add('completed');
        lines[i - 1].classList.add('completed'); // Marca la línea anterior como completada
    }
}


[].forEach.call(document.getElementsByClassName('tags-input'), function (el) {
    let hiddenInput = document.createElement('input'),
        mainInput = document.createElement('input'),
        tags = [];
    
    hiddenInput.setAttribute('type', 'hidden');
    hiddenInput.setAttribute('name', el.getAttribute('data-name'));

    mainInput.setAttribute('type', 'text');
    mainInput.classList.add('main-input');
    mainInput.addEventListener('input', function () {
        let enteredTags = mainInput.value.split(',');
        if (enteredTags.length > 1) {
            enteredTags.forEach(function (t) {
                let filteredTag = filterTag(t);
                if (filteredTag.length > 0)
                    addTag(filteredTag);
            });
            mainInput.value = '';
        }
    });

    mainInput.addEventListener('keydown', function (e) {
        let keyCode = e.which || e.keyCode;
        if (keyCode === 8 && mainInput.value.length === 0 && tags.length > 0) {
            removeTag(tags.length - 1);
        }
    });

    el.appendChild(mainInput);
    el.appendChild(hiddenInput);

    addTag('hello!');

    function addTag (text) {
        let tag = {
            text: text,
            element: document.createElement('span'),
        };

        tag.element.classList.add('tag');
        tag.element.textContent = tag.text;

        let closeBtn = document.createElement('span');
        closeBtn.classList.add('close');
        closeBtn.addEventListener('click', function () {
            removeTag(tags.indexOf(tag));
        });
        tag.element.appendChild(closeBtn);

        tags.push(tag);

        el.insertBefore(tag.element, mainInput);

        refreshTags();
    }

    function removeTag (index) {
        let tag = tags[index];
        tags.splice(index, 1);
        el.removeChild(tag.element);
        refreshTags();
    }

    function refreshTags () {
        let tagsList = [];
        tags.forEach(function (t) {
            tagsList.push(t.text);
        });
        hiddenInput.value = tagsList.join(',');
    }

    function filterTag (tag) {
        return tag.replace(/[^\w -]/g, '').trim().replace(/\W+/g, '-');
    }
});

});

/*
function MandarParticipantes(){
    $.ajax({
                    url: '@Url.Action("TomarParticipantes", "CrearPlan")',
                    type: 'GET',
                    data: {participantes=validTags},
                    success: function (data) {
                        
                    }
                });
}
*/


</script>